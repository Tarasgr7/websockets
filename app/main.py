import uuid
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from starlette.requests import Request

app = FastAPI()

# –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–¥–∞—î–º–æ —à–∞–±–ª–æ–Ω–∏ —Ç–∞ —Å—Ç–∞—Ç–∏–∫—É
templates = Jinja2Templates(directory="./app/templates")
app.mount("/static", StaticFiles(directory="./app/static"), name="static")


# –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket-–∑'—î–¥–Ω–∞–Ω—å
class ConnectionManager:
    def __init__(self):
        self.active_connections: dict[str, WebSocket] = {}  # {client_id: connection}
        self.usernames: dict[str, str] = {}  # {client_id: username}

    async def connect(self, websocket: WebSocket, username: str):
        if not username.strip():  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —ñ–º'—è
            await websocket.close()
            return None  # –ù–µ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–µ–∑ —ñ–º–µ–Ω—ñ

        client_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
        self.active_connections[client_id] = websocket
        self.usernames[client_id] = username
        await self.broadcast(f"üì© üü¢ {username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É.", sender_id=None)
        return client_id

    async def disconnect(self, client_id: str):
        if client_id and client_id in self.active_connections:
            username = self.usernames.pop(client_id, None)  # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            del self.active_connections[client_id]
            if username:
                await self.broadcast(f"üì© üî¥ {username} –ø–æ–∫–∏–Ω—É–≤ —á–∞—Ç.", sender_id=None)

    async def broadcast(self, message: str, sender_id: str = None):
        sender_name = self.usernames.get(sender_id, "")
        for client_id, connection in self.active_connections.items():
            if sender_id is None:
                # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
                formatted_message = message
            elif client_id == sender_id:
                # –Ø–∫—â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ "–í–∏:"
                formatted_message = f"–í–∏: {message}"
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º
                formatted_message = f"üì© {sender_name}: {message}"

            await connection.send_json({"message": formatted_message})


manager = ConnectionManager()


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()  # ‚úÖ –ü—Ä–∏–π–º–∞—î–º–æ WebSocket —Ç—ñ–ª—å–∫–∏ —Ç—É—Ç

    try:
        data = await websocket.receive_json()  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        username = data.get("username", "").strip()
        client_id = await manager.connect(websocket, username)

        if not client_id:  # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è (–Ω–µ –≤–∫–∞–∑–∞–≤ —ñ–º'—è)
            return

        while True:
            message = await websocket.receive_text()
            if client_id not in manager.active_connections:  # –Ø–∫—â–æ —é–∑–µ—Ä –≤–∏–π—à–æ–≤ ‚Äî –Ω–µ –¥–∞—î–º–æ –ø–∏—Å–∞—Ç–∏
                break
            await manager.broadcast(message, sender_id=client_id)

    except WebSocketDisconnect:
        await manager.disconnect(client_id)


@app.get("/")
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})
